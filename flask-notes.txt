tutorial: http://pythonhow.com/how-making-a-website-with-python-works

url makes req to web server

backend handel requests via CGI (common gateway interface)

client - server model # script handles com b/w these

flask framework - looks for HTML files ina folder that should be called templates

render_template
The method will generate a jinja2 template object out of that HTML and return it to the browser when the user visits associated URL.
http://jinja.pocoo.org/docs/dev/

Wrap our heading and paragraph tags inside div tags.
That will keep them grouped inside the same section in the HTML document so that we can later apply CSS styling to that section

python script = coms b/w client/server
html = structure of pg content
css = presentation format, static files (no interaction) --> put in static/css folder
[brush up on css - .menu li + li ]

tweak the HTML files by adding more divs if you want more sections in your webpages.

<!-- note: href= {{ url_for('FUNCTION_NAME') }} fn name defined in my-site.py -->
# note: above will be attempted to be fond by flask --> leads to error, don't comment like this in html file

i.e. reference event-trigger.html
as triggered (fn name) not route name
@app.route('/trigger/')
def triggered():
    return render_template('event-trigger.html')
as rendered via jinja2
in jinja2 <!-- --> not treated as comment so will try find the fn url_for('xxxx')
or url_4('xxx') etc

Jinja2 has no support for comments within a {{ ... }} statement. You can only use comments outside of such statements, and then only with {# .. #} or ## comment.
http://stackoverflow.com/questions/13562222/jinja2-inline-comments
